{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "11766bf8-f94b-477e-b262-a2b929b5a3fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "ff3f763b-14b9-4499-81ba-0f2d0f2e5a89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(-6., -80.  ) (-5., -57.2 ) (-4., -37.9 ) (-3., -22.  ) (-2.,  -9.87)\n",
      " (-1.,  -1.77) ( 0.,   2.  ) ( 1.,   1.23) ( 2.,  -4.13)]\n"
     ]
    }
   ],
   "source": [
    "data = np.genfromtxt('2.txt', names=True)\n",
    "print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "1527fba6-0ad4-4b72-9dfa-c7659ea40f6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def trapezium(x, f):\n",
    "    I = 0\n",
    "    for i in range(len(x) - 1):\n",
    "        h = x[i + 1] - x[i]\n",
    "        I += h / 2 * (f[i + 1] + f[i])\n",
    "    return I"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "51a5a643-5138-4e96-81f7-e88880763c03",
   "metadata": {},
   "outputs": [],
   "source": [
    "def trapezium2(x, f):\n",
    "    I = 0\n",
    "    for i in range(0, len(x) - 1, 2):\n",
    "        h = x[i + 2] - x[i]\n",
    "        I += h / 2 * (f[i + 2] + f[i])\n",
    "    return I"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "0da9a340-61da-4061-bb4b-f1b8c3677255",
   "metadata": {},
   "outputs": [],
   "source": [
    "def simpson(x, f):\n",
    "    I = 0\n",
    "    for i in range(int(np.floor(len(x) / 2))):\n",
    "        h = x[2 * i + 1] - x[2 * i]\n",
    "        I += h / 3 * (f[2 * i] + 4 * f[2 * i + 1] + f[2 * i + 2])\n",
    "    return I"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "45d5ef25-e078-499e-b955-bb5b4ac96d6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_der(x, f):\n",
    "    f_der = np.zeros(len(f))\n",
    "    h = x[1] - x[0]\n",
    "\n",
    "    for i in range(3):\n",
    "        f_der[i] = 1 / 6 / h * (-11 * f[i] + 18 * f[i + 1] - 9 * f[i + 2] + 2 * f[i + 3])\n",
    "    \n",
    "    for i in range(3, len(f)):\n",
    "        f_der[i] = 1 / 6 / h * (-2 * f[i - 3] + 9 * f[i - 2] - 18 * f[i -1] + 11 * f[i])\n",
    "    return f_der"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "3e2eb1ff-90f0-4ddc-8a91-e52e87f83eed",
   "metadata": {},
   "outputs": [],
   "source": [
    "def euler_maclaurin(x, f):\n",
    "    I = 0\n",
    "    f_der = get_der(x, f)\n",
    "    for i in range(len(f) - 1):\n",
    "        h = x[i + 1] - x[i]\n",
    "        I += h / 2 * (f[i + 1] + f[i]) - h**2 / 12 * (f_der[i + 1] - f_der[i])\n",
    "    return I"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "f9011d5e-4bbb-41ae-a60d-25a2e808db25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-167.57499999999996"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trapezium(data['x'], data['f'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "59be8dc6-e646-45fe-b6df-1de01220bfe6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.333333333333333"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1 / 12 * 3.5 * 8 # Error for trapezium"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "abc6c4e9-8e4d-47f0-ab17-6a64b5405572",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-164.8766666666666"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "I = trapezium(data['x'], data['f'])\n",
    "I2 = trapezium2(data['x'], data['f'])\n",
    "I + (I - I2)/ 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "6a61b3d4-2834-499a-a203-3dd1ce8db668",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-164.87666666666664"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simpson(data['x'], data['f'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "80f5c32e-eeb2-48af-9ed3-e8e2680a1d84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.008888888888888889"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1 / 180 * 0.2 * 8 # Error for simpson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "da9a2e12-b9b2-481d-8bcf-7fad82e66529",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-164.88708333333332"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "euler_maclaurin(data['x'], data['f'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11ddb303-36b6-4fa0-b80b-17555fd10691",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
